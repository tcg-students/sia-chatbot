{"version":3,"sources":["Components/ConfirmDetails.jsx","Components/GenericForm.jsx","Components/EditForm.jsx","Components/FormIneractionController.jsx","Redux/ActionCreators/index.js","Redux/ActionTypes/index.js","Components/ChatInput.jsx","Components/Spinner.jsx","Components/ChatbotDisplay.jsx","Components/chatbot.jsx","App.js","Redux/Reducers/chatbotReducers/chatbotReducer.js","Redux/Reducers/index.js","Redux/Store/index.js","reportWebVitals.js","index.js"],"names":["ConfirmDetails","props","displayApplicantInfomation","sendFormValues","handleEdit","react_default","a","createElement","map","item","i","className","key","Object","keys","style","color","type","value","onClick","GenericForm","createForm","formStructure","handleChange","handleSubmit","applicationForm","useEffect","onSubmit","name","placeholder","onChange","e","charAt","toUpperCase","slice","match","join","concat","toLowerCase","required","undefined","EditForm","editForm","length","GenericForm_GenericForm","Components_ConfirmDetails","FormIneractionController","applicationFormAndApplicantInfoShow","Components_EditForm","getInitialNode","obj","_ref2","asyncToGenerator","_regeneratorRuntime","mark","_callee2","dispatch","response","getInitialNodeData","wrap","_context2","prev","next","loading","axios","post","sent","console","log","data","rows","idObj","payload","stop","_x2","apply","this","arguments","removeLastNodes","id","_ref4","_callee4","_context4","_x4","resetStateValues","_ref5","_callee5","_context5","_x5","status","ChatInput","introTreeMessages","_useState","nextNodes","useState","_useState2","slicedToArray","input","setInput","useDispatch","currentNodes","useSelector","state","botConversation","currentBotRes","target","newIntroOptions","find","node_id","selectedValue","setTimeout","treeid","searchValue","filter","option","nodeid","disabled","Spinner","class","ChatbotDisplay","handleInitialNodeOptions","nodeDisplay","handleScroll","handleResetChatbot","nodeTextStyling","isLoading","display","marginTop","gap","text","padding","image","src","alt","includes","Components_Spinner","application","FormIneractionController_FormIneractionController","Components_ChatInput","Chatbot","setApplicationForm","_useState3","_useState4","setChatbotNodes","_useState5","_useState6","setFormStructure","_useState7","_useState8","setEditForm","_useState9","_useState10","compareNode","setCompareNode","_useState11","_useState12","setDisplayApplicantInfomation","_useState13","_useState14","setapplicationFormAndApplicantInfoShow","welcomeMessages","optionBotMessages","stateId","withReactContent","Swal","getImage","_","getInitialContents","_ref","chatbot_regeneratorRuntime","_callee","_context","getData","get","treeMessages","_x","abrupt","t0","jsonForm","object","Components_ChatbotDisplay","values","push","objectSpread","defineProperty","preventDefault","_ref3","_callee3","getFormData","_context3","_x3","fire","title","timer","showConfirmButton","elem","document","getElementById","scrollTop","scrollHeight","test","App","chatbot","initialState","logo","nodeId","rootReducer","combineReducers","action","newListObj","toConsumableArray","textList","foundIndex","indexOfOption","choppedList","splice","botConversationalMessages","applicantInfomation","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","es","src_App"],"mappings":"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","file":"static/js/main.eb9882e0.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction ConfirmDetails(props) {\n  const { displayApplicantInfomation, sendFormValues, handleEdit } = props;\n  return (\n    <div>\n      {displayApplicantInfomation !== [] &&\n        displayApplicantInfomation.map((item, i) => {\n          return (\n            <div className=\"applicantInfomationContainer\">\n              <div className=\"applicantInfomation\">\n                <p>You are applying with the following infomation:</p>\n                <hr />\n                <ul key={i}>\n                  {Object.keys(item).map((key) => {\n                    return (\n                      <li\n                        className=\"info\"\n                        style={{ color: \"#033333\" }}\n                        key={key + i}\n                      >\n                        {key}: {item[key]}\n                      </li>\n                    );\n                  })}\n                </ul>\n              </div>\n\n              <div style={{ color: \"#033333\" }}>\n                <p style={{ color: \"white\" }}>Would you like to edit?</p>\n                <div className=\"applicantInfomationButtons\">\n                  <input\n                    type=\"submit\"\n                    className=\"optionButtons\"\n                    value=\"Yes\"\n                    onClick={handleEdit}\n                  />\n                  <input\n                    type=\"submit\"\n                    className=\"optionButtons\"\n                    onClick={sendFormValues}\n                    value=\"No\"\n                  />\n                </div>\n              </div>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default ConfirmDetails;","import React from \"react\";\nimport { useEffect } from \"react\";\n\nexport const GenericForm = (props) => {\n  const { createForm, formStructure, handleChange, handleSubmit , applicationForm} = props;\n\n  useEffect(() => {\n    createForm();\n  }, []);\n\n  return (\n    <div className=\"wrapper\">\n        <form className=\"form\" onSubmit={handleSubmit}>\n          {formStructure.map((item, key) => {\n            return (\n              <div key={key}>\n                {item.value === \"textarea\" ? (\n                  <div>\n                    <label className=\"form-label noneAstericks\">\n                      {item.name}\n                    </label>\n                    <textarea\n                      className=\"form-textarea\"\n                      type={item.value}\n                      name={item.name}\n                      placeholder=\"Message\"\n                      onChange={(e) => handleChange(e)}\n                      value={applicationForm[item.name] !== {} || applicationForm[item.name] !== null || applicationForm[item.name] !== null? applicationForm[item.name] : \"\"}\n                    />\n                  </div>\n                ) : (\n                  <div>\n                    <label className=\"form-label addAstericks\">\n                      {item.name.charAt(0).toUpperCase() +\n                        item.name\n                          .slice(1)\n                          .match(/([A-Z]?[^A-Z]*)/g)\n                          .join(\" \")}\n                    </label>\n                    <input\n                      placeholder={`Enter your ${item.name\n                        .match(/([A-Z]?[^A-Z]*)/g)\n                        .slice(0, -1)\n                        .join(\" \")\n                        .toLowerCase()}`}\n                      className=\"form-input\"\n                      type={item.value}\n                      name={item.name}\n                      onChange={(e) => handleChange(e)}\n                      required\n                      value={applicationForm[item.name] !== undefined?applicationForm[item.name] : \"\"}\n                    />\n                  </div>\n                )}\n              </div>\n            );\n          })}\n          <div >\n            <button type=\"submit\" className=\"form-button\">Submit</button>\n\n\n          </div>\n        </form>\n    </div>\n  );\n};","import React from \"react\";\nimport { GenericForm } from \"./GenericForm\";\nimport ConfirmDetails from \"./ConfirmDetails\";\n\nfunction EditForm(props) {\n  const { editForm, displayApplicantInfomation } = props;\n\n  return (\n    <div>\n      {editForm && displayApplicantInfomation.length > 0 ? (\n        <GenericForm {...props} />\n      ) : (\n        <ConfirmDetails {...props} />\n      )}\n    </div>\n  );\n}\n\nexport default EditForm;\n","import React, { useEffect } from \"react\";\nimport ConfirmDetails from \"./ConfirmDetails\";\nimport EditForm from \"./EditForm\";\nimport { GenericForm } from \"./GenericForm\";\n\nexport const FormIneractionController = (props) => {\n  const {\n    createForm,\n    formStructure,\n    handleChange,\n    handleSubmit,\n    displayApplicantInfomation,\n    applicationFormAndApplicantInfoShow,\n    sendFormValues,\n    handleEdit,\n    editForm,\n  } = props;\n\n  useEffect(() => {\n    createForm();\n  }, []);\n\n  return (\n    <div>\n      {!applicationFormAndApplicantInfoShow ? (\n        <GenericForm {...props} />\n      ) : (\n        !editForm && <ConfirmDetails {...props} />\n      )}\n      {editForm && <EditForm {...props} />}\n    </div>\n  );\n};","import axios from \"axios\";\nimport * as actions from \"../ActionTypes/index\";\nconst URL = \"/api\";\n\n\nexport const getInitialTreeText = () => {\n  return async (dispatch) => {\n    dispatch(loading(false))\n    const response = await axios.get(`https://sia-bo.herokuapp.com/treeMessages`);\n    const getData = response.data.treeMessages;\n    dispatch({\n      type: actions.GETTING_FIRST_TREE_WELCOME_MESSAGES,\n      payload: getData,\n    });\n  };\n};\n\nexport const getInitialNode = (obj) => {\n  return async (dispatch) => {\n    dispatch(loading(false))\n    const response = await axios.post(\n      `http://localhost:4004/get_initial_nodes`,\n      obj\n    );\n\n    console.log(\"response\", response.data.rows)\n    const getInitialNodeData = response.data.rows;\n    dispatch({\n      type: actions.GETTING_FIRST_NODE_OPTIONS,\n      idObj: obj,\n      payload: getInitialNodeData,\n    });\n  };\n};\n\nexport const getInitialNode2 = (obj) => {\n  return {\n    type: \"UPDATE_ID\",\n    payload: obj,\n  };\n};\n\nexport const getApplicationFormValues = (data) => {\n  return async (dispatch) => {\n    const response = await axios.post(`http://localhost:4004/send_email`, data);\n    const getFormData = response.data;\n    dispatch({ type: actions.SEND_APPLICANT_DETAILS, payload: getFormData });\n  };\n};\n\nexport const removeLastNodes = (id) => {\n  return async (dispatch) => {\n    dispatch({ type: \"REMOVE_LAST_NODES\", payload: id });\n  };\n};\n\nexport const resetStateValues = () => {\n  return async (dispatch) => {\n    dispatch(loading(false))\n    dispatch({ type: actions.RESET_STATE, payload: [] });\n  };\n};\n\nexport const resetInitialNodes = () => {\n  return async (dispatch) => {\n    dispatch({ type: actions.RESET_INITIAL_NODES, payload: [] });\n  };\n};\n\nexport const loading=(status)=>{\n  return (dispatch)=>{\n    dispatch({type: actions.LOADING, payload: status})\n  }\n}","export const GET_LOGO = \"GET_LOGO\";\nexport const GETTING_FIRST_TREE_WELCOME_MESSAGES =\n  \"GETTING_FIRST_TREE_WELCOME_MESSAGES\";\nexport const GETTING_FIRST_NODE_OPTIONS = \"GETTING_FIRST_NODE_OPTIONS\";\nexport const GETTING_ALL_NODE_MESSAGES = \"GETTING_ALL_NODE_MESSAGES\";\nexport const GETTING_NODE_OPTIONS = \"GETTING_NODE_OPTIONS\";\nexport const SEND_APPLICANT_DETAILS = \"SEND_APPLICANT_DETAILS\";\nexport const RESET_STATE = \"RESET_STATE\";\nexport const RESET_INITIAL_NODES = \"RESET_INITIAL_NODES\";\nexport const LOADING = \"LOADING\";","import { useDispatch, useSelector } from \"react-redux\";\nimport React, { useState, useEffect } from \"react\";\nimport { getInitialNode } from \"../Redux/ActionCreators/index\";\n\nfunction ChatInput(props) {\n  const { introTreeMessages, nextNodes } = props;\n  const [input, setInput] = useState();\n  let dispatch = useDispatch();\n\n  let currentNodes = useSelector(\n    (state) => state.botConversation.currentBotRes\n  );\n\n  const handleInput = () => {\n    let newIntroOptions =\n      currentNodes && currentNodes.length > 0\n        ? currentNodes\n        : introTreeMessages;\n\n    if (newIntroOptions.find((item) => item.node_id === undefined)) {\n      const searchValue = input;\n      const selectedValue = newIntroOptions[searchValue].id;\n      setTimeout(function() {\n        dispatch(getInitialNode({ treeid: selectedValue }));\n      }, 1000);\n    } else {\n      const searchValue = input - 1;\n      let newCurrentNodes = currentNodes.filter((item) => item.option);\n      const selectedValue = newCurrentNodes[searchValue].id;\n      setTimeout(function() {\n        dispatch(getInitialNode({ nodeid: selectedValue }));\n      }, 1000);\n    }\n    setInput(\"\");\n  };\n\n  return (\n    <div className=\"selectInput\">\n      <input\n        className=\"form-control\"\n        type=\"number\"\n        value={input}\n        onChange={(e) => setInput(e.target.value)}\n        placeholder=\"Response Command\"\n      />\n      <input\n        type=\"button\"\n        className=\"btn btn-dark\"\n        value=\"Send\"\n        onClick={handleInput}\n        disabled={!input}\n      />\n    </div>\n  );\n}\n\nexport default ChatInput;","import React from \"react\";\n\nfunction Spinner() {\n  return (\n    <div class=\"lds-ellipsis\"><div></div><div></div><div></div><div></div></div>\n  );\n}\n\nexport default Spinner;","import React, { useState, useEffect } from \"react\";\nimport { FormIneractionController } from \"./FormIneractionController\";\nimport Chatinput from \"./ChatInput\";\nimport EditForm from \"./EditForm.jsx\";\nimport Loading from \"./Spinner.jsx\"\nimport \"../responsive.css\";\n\nconst ChatbotDisplay = (props) => {\n  const {\n    handleInitialNodeOptions,\n    introTreeMessages,\n    nextNodes,\n    nodeDisplay,\n    handleScroll,\n    handleResetChatbot,\n    nodeTextStyling,\n    isLoading\n  } = props;\n\n  useEffect(() => {\n    nodeDisplay();\n    handleScroll();\n  });\n\n  return (\n    <div>\n      <div className=\"chatBotHeaderContainer\">\n        <div className=\"chatBotHeader\">\n          <input type=\"button\"\n            className=\"headerButtons\"\n            onClick={handleResetChatbot}\n            value=\"Reset\"\n            />\n\n          <div style={{ display: \"flex\", marginTop: \"auto\", gap: \"10px\" }}>\n           \n            <h1>Sia Bot</h1>\n\n          </div>\n        </div>\n\n      </div>\n      <div id=\"chatbotBodyDiv\" className=\"chatbotBody\">\n        <div>\n          {introTreeMessages !== undefined &&\n            introTreeMessages.map((item) => {\n              return (\n                <div className=\"introMessage\">\n                  <p>{item.text}</p>\n                </div>\n              );\n            })}\n        </div>\n\n        <div className=\"treeOptions\"></div>\n        <div>\n          {nextNodes !== undefined\n            ? nextNodes &&\n            nextNodes\n            .filter((item) => item.id !== 0)\n            .map((item, i) => {\n              if (item.text) {\n                return (\n                  <div style={{ padding: \".5rem\" }}>\n                        <p className={nodeTextStyling(item.text)}>\n\n                          {item.text}\n                        </p>\n                      </div>\n                    );\n                  } else if (item.image) {\n                    return (\n                      <div className=\"mapImage\" style={{ padding: \".5rem\" }}>\n                        <img className=\"mapImage\" src={item.image} alt=\"Map Logo\" />\n                      </div>\n                    );\n                  } else if (item.option) {\n                    return item.option.includes(\"Back to top\" ) || item.option.includes(\"No\" ) ? (\n                      <div style={{ padding: \".5rem\" }}>\n                        <button\n                          className=\"optionButtons\"\n                          onClick={() =>\n                            handleResetChatbot({ nodeid: item.id })\n                          }\n                          >\n                          {item.option}\n                        </button>\n                      </div>\n                    ) : (\n                      <div style={{ padding: \".5rem\" }}>\n                        <button\n                          className=\"optionButtons\"\n                          onClick={() =>\n                            handleInitialNodeOptions({ nodeid: item.id })\n                          }\n                          >\n                          {item.option}\n                        </button>\n                      </div>\n                    );\n                  }\n                })\n                \n                : null}\n\n               {isLoading && <Loading />} \n        </div>\n        <div>\n          {nextNodes.map((item) => {\n            if (item.application !== null) {\n              return <FormIneractionController {...props} />;\n            }\n          })}\n        </div>\n      </div>\n\n      <div className=\"chatbotFooter\">\n        <p style={{ color: \"white\" }}>Command:</p>\n        <Chatinput\n          introTreeMessages={introTreeMessages}\n          nextNodes={nextNodes}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default ChatbotDisplay;","import React, { useState, useEffect } from \"react\";\nimport ChatbotDisplay from \"./ChatbotDisplay\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Swal from \"sweetalert2\";\nimport withReactContent from \"sweetalert2-react-content\";\nimport {\n  getInitialTreeText,\n  getInitialNode,\n  getApplicationFormValues,\n  resetStateValues,\n  loading,\n  removeLastNodes,\n  getInitialNode2,\n} from \"../Redux/ActionCreators/index\";\nconst Chatbot = (props) => {\n  const [applicationForm, setApplicationForm] = useState({});\n  const [chatbotNodes, setChatbotNodes] = useState([]);\n  const [formStructure, setFormStructure] = useState([]);\n  const [editForm, setEditForm] = useState(false);\n  const [compareNode, setCompareNode] = useState([]);\n  const [displayApplicantInfomation, setDisplayApplicantInfomation] = useState([]);\n  \n\n  const [\n    applicationFormAndApplicantInfoShow,\n    setapplicationFormAndApplicantInfoShow,\n  ] = useState(false);\n\n  let introTreeMessages = useSelector(\n    (state) => state.botConversation.welcomeMessages\n  );\n  let isLoading = useSelector((state)=>state.botConversation.isLoading)\n  \n  let nextNodes = useSelector(\n    (state) => state.botConversation.optionBotMessages\n  );\n\n  let stateId = useSelector((state) => state.botConversation.id);\n\n  const MySwal = withReactContent(Swal);\n\n  let dispatch = useDispatch();\n\n  useEffect(() => {\n    return () => {\n      getImage()\n    };\n  }, []);\n\n  const handleEdit = (e) => {\n    e.preventDefault();\n\n    setEditForm(!editForm);\n  };\n\n  const getImage = (_) => {\n  \n    getInitialContents();\n  };\n\n  const getInitialContents = async () => {\n    try {\n      setTimeout(function() {\n        dispatch(loading(true))\n        dispatch(getInitialTreeText());\n      }, 1000);\n      setTimeout(function() {\n        dispatch(getInitialNode({ treeid: 1 }));\n      }, 1800);\n      setCompareNode([]);\n\n      return;\n    } catch (error) {\n      console.log(\"error\", error);\n    }\n  };\n\n  const handleInitialNodeOptions = async (id) => {\n    try {\n      dispatch(loading(true))\n      dispatch(getInitialNode2(id));\n      if (stateId === id.nodeid) {\n        return;\n      }\n      if (id.nodeid) {\n        for (var i in compareNode) {\n          if (compareNode[i].id === id.nodeid) {\n            setTimeout(function() {\n            dispatch(removeLastNodes(id));\n            }, 1000);\n            \n          }\n        }\n        setCompareNode(nextNodes);\n      }\n      setTimeout(function() {\n        dispatch(getInitialNode(id));\n      }, 1000);\n    } catch (error) {\n      console.log(\"error\", error);\n    }\n  };\n\n  const nodeDisplay = (_) => {\n    setChatbotNodes(nextNodes);\n  };\n\n  \n\n  const jsonForm = nextNodes.filter((item) => item.id !== 0);\n  var object = jsonForm && jsonForm[jsonForm.length - 1];\n   console.log(\"obj\", object)\n\n  const createForm = (_) => {\n    var values = [];\n    if (object) {\n      for (var i in object.application) {\n        values.push({ name: i, value: object.application[i]});\n        console.log('values', values)\n      }\n    }\n    setFormStructure(values);\n  };\n\n  console.log(\"form\", formStructure)\n\n  const handleChange = (e) => {\n    setApplicationForm({ ...applicationForm, [e.target.name]: e.target.value });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setEditForm(false);\n\n    if (applicationForm) {\n      setDisplayApplicantInfomation([applicationForm]);\n      setTimeout(function() {\n        setapplicationFormAndApplicantInfoShow(true);\n      }, 1000);\n    }\n  };\n\n  const sendFormValues = (_) => {\n    dispatch(getApplicationFormValues(applicationForm));\n    const MySwal = withReactContent(Swal);\n    MySwal.fire({\n      title:\n        \"Your details were submitted successfully. We’ll be in contact soon!\",\n      timer: 5000,\n      showConfirmButton: false,\n    });\n    setTimeout(function() {\n      dispatch(resetStateValues());\n      getImage();\n      handleInitialNodeOptions();\n      setDisplayApplicantInfomation([]);\n      setapplicationFormAndApplicantInfoShow(false);\n      setApplicationForm({});\n    }, 5000);\n  };\n\n  const handleScroll = (_) => {\n    var elem = document.getElementById(\"chatbotBodyDiv\");\n    elem.scrollTop = elem.scrollHeight;\n  };\n\n  const handleResetChatbot = (_) => {\n    dispatch(loading(true))\n    setTimeout(function() {\n      dispatch(resetStateValues());\n      getImage();\n      handleInitialNodeOptions();\n      setDisplayApplicantInfomation([]);\n      setapplicationFormAndApplicantInfoShow(false);\n      setCompareNode([]);\n         }, 2000);\n\n  };\n\n  const nodeTextStyling = (text) => {\n    let pattern = /(\\d[.])/g;\n    let foundMatch = pattern.test(text);\n\n\n    if (foundMatch) {\n      return \"p-tag-text1\";\n    } else {\n      return \"p-tag-text\";\n    }\n  };\n\n  return (\n    <div>\n      <ChatbotDisplay\n        introTreeMessages={introTreeMessages}\n        nextNodes={nextNodes}\n        nodeDisplay={nodeDisplay}\n        handleInitialNodeOptions={handleInitialNodeOptions}\n        createForm={createForm}\n        formStructure={formStructure}\n        handleChange={handleChange}\n        handleEdit={handleEdit}\n        handleSubmit={handleSubmit}\n        displayApplicantInfomation={displayApplicantInfomation}\n        applicationFormAndApplicantInfoShow={\n          applicationFormAndApplicantInfoShow\n        }\n        isLoading={isLoading}\n        sendFormValues={sendFormValues}\n        handleScroll={handleScroll}\n        handleResetChatbot={handleResetChatbot}\n        nodeTextStyling={nodeTextStyling}\n        editForm={editForm}\n        applicationForm={applicationForm}\n      />\n    </div>\n  );\n};\n\nexport default Chatbot;","import React from \"react\" ; \nimport Chatbot from './Components/chatbot';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Chatbot/>   \n    </div>\n  );\n}\n\nexport default App;\n","import * as actions from \"../../ActionTypes/index\";\n\nconst REMOVE_LAST_NODES = \"REMOVE_LAST_NODES\";\nlet initialState = {\n  logo: [],\n  nodeId: [],\n  currentNodes: [],\n  welcomeMessages: [],\n  optionBotMessages: [],\n  id: null,\n  isLoading:false\n};\n\nexport const chatbotMessagesReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actions.GET_LOGO:\n      return {\n        ...state,\n        logo: action.payload,\n      };\n    case actions.GETTING_FIRST_TREE_WELCOME_MESSAGES:\n      return {\n        ...state,\n        isLoading:true,\n        welcomeMessages: action.payload,\n      };\n\n    case actions.GETTING_FIRST_NODE_OPTIONS:\n      const newListObj = [\n        ...state.optionBotMessages,\n        {\n          id: 0,\n          application: null,\n        },\n        ...action.payload,\n        {\n          id: 0,\n          application: null,\n        },\n      ];\n      return {\n        ...state,\n        optionBotMessages: newListObj,\n        currentBotRes: action.payload,\n      };\n\n    case \"UPDATE_ID\":\n      return {\n        ...state,\n        id: action.payload.nodeid\n          ? action.payload.nodeid\n          : action.payload.treeid,\n      };\n\n    case REMOVE_LAST_NODES:\n      var textList = [...state.optionBotMessages];\n      var foundIndex = 0;\n      var indexOfOption = 0;\n      for (var i in state.optionBotMessages) {\n        if (state.optionBotMessages[i].id === action.payload.nodeid) {\n          foundIndex = i;\n        }\n      }\n      for (var i = foundIndex; i < state.optionBotMessages.length; i++) {\n        if (state.optionBotMessages[i].id === 0) {\n          indexOfOption = i;\n          break;\n        }\n      }\n\n      var choppedList = textList.splice(0, indexOfOption);\n\n      return {\n        ...state,\n        optionBotMessages: [...choppedList],\n        currentBotRes: action.payload,\n      };\n\n    case actions.GETTING_NODE_OPTIONS:\n      return {\n        ...state,\n        botConversationalMessages: [\n          ...state.botConversationalMessages,\n          ...action.payload,\n        ],\n      };\n\n    case actions.SEND_APPLICANT_DETAILS:\n      return {\n        ...state,\n        applicantInfomation: action.payload,\n      };\n\n    case actions.RESET_STATE:\n      return {\n        ...state,\n        nodeId: [],\n        currentNodes: [],\n        welcomeMessages: [],\n        optionBotMessages: [],\n        id: null,\n      };\n    case actions.LOADING:\n      return{\n        ...state,isLoading: action.payload\n      }\n\n    default:\n      return state;\n  }\n};","import { chatbotMessagesReducer } from \"./chatbotReducers/chatbotReducer\";\nimport { combineReducers } from \"redux\";\n\nexport const rootReducer = combineReducers({\n  botConversation: chatbotMessagesReducer,\n});\n","import thunk from \"redux-thunk\" \nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport {rootReducer} from \"../Reducers/index\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunk))\n);\n\nexport default store;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport store from \"./Redux/Store/index\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}